// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: descriptor.proto

package com.google.protobuf;

/**
 * Protobuf type {@code google.protobuf.FieldOptions}
 */
public final class FieldOptions extends
		com.google.protobuf.GeneratedMessage.ExtendableMessage<FieldOptions>
		implements FieldOptionsOrBuilder {
	// Use FieldOptions.newBuilder() to construct.
	private FieldOptions(
			com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.protobuf.FieldOptions, ?> builder) {
		super(builder);
		this.unknownFields = builder.getUnknownFields();
	}

	private FieldOptions(boolean noInit) {
		this.unknownFields = com.google.protobuf.UnknownFieldSet
				.getDefaultInstance();
	}

	private static final FieldOptions defaultInstance;

	public static FieldOptions getDefaultInstance() {
		return defaultInstance;
	}

	public FieldOptions getDefaultInstanceForType() {
		return defaultInstance;
	}

	private final com.google.protobuf.UnknownFieldSet unknownFields;

	@java.lang.Override
	public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
		return this.unknownFields;
	}

	private FieldOptions(com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		initFields();
		int mutable_bitField0_ = 0;
		com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
				.newBuilder();
		try {
			boolean done = false;
			while (!done) {
				int tag = input.readTag();
				switch (tag) {
				case 0:
					done = true;
					break;
				default: {
					if (!parseUnknownField(input, unknownFields,
							extensionRegistry, tag)) {
						done = true;
					}
					break;
				}
				case 8: {
					int rawValue = input.readEnum();
					com.google.protobuf.FieldOptions.CType value = com.google.protobuf.FieldOptions.CType
							.valueOf(rawValue);
					if (value == null) {
						unknownFields.mergeVarintField(1, rawValue);
					} else {
						bitField0_ |= 0x00000001;
						ctype_ = value;
					}
					break;
				}
				case 16: {
					bitField0_ |= 0x00000002;
					packed_ = input.readBool();
					break;
				}
				case 24: {
					bitField0_ |= 0x00000008;
					deprecated_ = input.readBool();
					break;
				}
				case 40: {
					bitField0_ |= 0x00000004;
					lazy_ = input.readBool();
					break;
				}
				case 74: {
					bitField0_ |= 0x00000010;
					experimentalMapKey_ = input.readBytes();
					break;
				}
				case 80: {
					bitField0_ |= 0x00000020;
					weak_ = input.readBool();
					break;
				}
				case 7994: {
					if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
						uninterpretedOption_ = new java.util.ArrayList<com.google.protobuf.UninterpretedOption>();
						mutable_bitField0_ |= 0x00000040;
					}
					uninterpretedOption_.add(input.readMessage(
							com.google.protobuf.UninterpretedOption.PARSER,
							extensionRegistry));
					break;
				}
				}
			}
		} catch (com.google.protobuf.InvalidProtocolBufferException e) {
			throw e.setUnfinishedMessage(this);
		} catch (java.io.IOException e) {
			throw new com.google.protobuf.InvalidProtocolBufferException(
					e.getMessage()).setUnfinishedMessage(this);
		} finally {
			if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
				uninterpretedOption_ = java.util.Collections
						.unmodifiableList(uninterpretedOption_);
			}
			this.unknownFields = unknownFields.build();
			makeExtensionsImmutable();
		}
	}

	public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
		return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldOptions_descriptor;
	}

	protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
		return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldOptions_fieldAccessorTable
				.ensureFieldAccessorsInitialized(
						com.google.protobuf.FieldOptions.class,
						com.google.protobuf.FieldOptions.Builder.class);
	}

	public static com.google.protobuf.Parser<FieldOptions> PARSER = new com.google.protobuf.AbstractParser<FieldOptions>() {
		public FieldOptions parsePartialFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return new FieldOptions(input, extensionRegistry);
		}
	};

	@java.lang.Override
	public com.google.protobuf.Parser<FieldOptions> getParserForType() {
		return PARSER;
	}

	/**
	 * Protobuf enum {@code google.protobuf.FieldOptions.CType}
	 */
	public enum CType implements com.google.protobuf.ProtocolMessageEnum {
		/**
		 * <code>STRING = 0;</code>
		 * 
		 * <pre>
		 * Default mode.
		 * </pre>
		 */
		STRING(0, 0),
		/**
		 * <code>CORD = 1;</code>
		 */
		CORD(1, 1),
		/**
		 * <code>STRING_PIECE = 2;</code>
		 */
		STRING_PIECE(2, 2), ;

		/**
		 * <code>STRING = 0;</code>
		 * 
		 * <pre>
		 * Default mode.
		 * </pre>
		 */
		public static final int STRING_VALUE = 0;
		/**
		 * <code>CORD = 1;</code>
		 */
		public static final int CORD_VALUE = 1;
		/**
		 * <code>STRING_PIECE = 2;</code>
		 */
		public static final int STRING_PIECE_VALUE = 2;

		public final int getNumber() {
			return value;
		}

		public static CType valueOf(int value) {
			switch (value) {
			case 0:
				return STRING;
			case 1:
				return CORD;
			case 2:
				return STRING_PIECE;
			default:
				return null;
			}
		}

		public static com.google.protobuf.Internal.EnumLiteMap<CType> internalGetValueMap() {
			return internalValueMap;
		}

		private static com.google.protobuf.Internal.EnumLiteMap<CType> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<CType>() {
			public CType findValueByNumber(int number) {
				return CType.valueOf(number);
			}
		};

		public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
			return getDescriptor().getValues().get(index);
		}

		public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
			return getDescriptor();
		}

		public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
			return com.google.protobuf.FieldOptions.getDescriptor()
					.getEnumTypes().get(0);
		}

		private static final CType[] VALUES = values();

		public static CType valueOf(
				com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
			if (desc.getType() != getDescriptor()) {
				throw new java.lang.IllegalArgumentException(
						"EnumValueDescriptor is not for this type.");
			}
			return VALUES[desc.getIndex()];
		}

		private final int index;
		private final int value;

		private CType(int index, int value) {
			this.index = index;
			this.value = value;
		}

		// @@protoc_insertion_point(enum_scope:google.protobuf.FieldOptions.CType)
	}

	private int bitField0_;
	// optional .google.protobuf.FieldOptions.CType ctype = 1 [default =
	// STRING];
	public static final int CTYPE_FIELD_NUMBER = 1;
	private com.google.protobuf.FieldOptions.CType ctype_;

	/**
	 * <code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>
	 * 
	 * <pre>
	 * The ctype option instructs the C++ code generator to use a different
	 * representation of the field than it normally would.  See the specific
	 * options below.  This option is not yet implemented in the open source
	 * release -- sorry, we'll try to include it in a future version!
	 * </pre>
	 */
	public boolean hasCtype() {
		return ((bitField0_ & 0x00000001) == 0x00000001);
	}

	/**
	 * <code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>
	 * 
	 * <pre>
	 * The ctype option instructs the C++ code generator to use a different
	 * representation of the field than it normally would.  See the specific
	 * options below.  This option is not yet implemented in the open source
	 * release -- sorry, we'll try to include it in a future version!
	 * </pre>
	 */
	public com.google.protobuf.FieldOptions.CType getCtype() {
		return ctype_;
	}

	// optional bool packed = 2;
	public static final int PACKED_FIELD_NUMBER = 2;
	private boolean packed_;

	/**
	 * <code>optional bool packed = 2;</code>
	 * 
	 * <pre>
	 * The packed option can be enabled for repeated primitive fields to enable
	 * a more efficient representation on the wire. Rather than repeatedly
	 * writing the tag and type for each element, the entire array is encoded as
	 * a single length-delimited blob.
	 * </pre>
	 */
	public boolean hasPacked() {
		return ((bitField0_ & 0x00000002) == 0x00000002);
	}

	/**
	 * <code>optional bool packed = 2;</code>
	 * 
	 * <pre>
	 * The packed option can be enabled for repeated primitive fields to enable
	 * a more efficient representation on the wire. Rather than repeatedly
	 * writing the tag and type for each element, the entire array is encoded as
	 * a single length-delimited blob.
	 * </pre>
	 */
	public boolean getPacked() {
		return packed_;
	}

	// optional bool lazy = 5 [default = false];
	public static final int LAZY_FIELD_NUMBER = 5;
	private boolean lazy_;

	/**
	 * <code>optional bool lazy = 5 [default = false];</code>
	 * 
	 * <pre>
	 * Should this field be parsed lazily?  Lazy applies only to message-type
	 * fields.  It means that when the outer message is initially parsed, the
	 * inner message's contents will not be parsed but instead stored in encoded
	 * form.  The inner message will actually be parsed when it is first accessed.
	 * 
	 * This is only a hint.  Implementations are free to choose whether to use
	 * eager or lazy parsing regardless of the value of this option.  However,
	 * setting this option true suggests that the protocol author believes that
	 * using lazy parsing on this field is worth the additional bookkeeping
	 * overhead typically needed to implement it.
	 * 
	 * This option does not affect the public interface of any generated code;
	 * all method signatures remain the same.  Furthermore, thread-safety of the
	 * interface is not affected by this option; const methods remain safe to
	 * call from multiple threads concurrently, while non-const methods continue
	 * to require exclusive access.
	 * 
	 * 
	 * Note that implementations may choose not to check required fields within
	 * a lazy sub-message.  That is, calling IsInitialized() on the outher message
	 * may return true even if the inner message has missing required fields.
	 * This is necessary because otherwise the inner message would have to be
	 * parsed in order to perform the check, defeating the purpose of lazy
	 * parsing.  An implementation which chooses not to check required fields
	 * must be consistent about it.  That is, for any particular sub-message, the
	 * implementation must either *always* check its required fields, or *never*
	 * check its required fields, regardless of whether or not the message has
	 * been parsed.
	 * </pre>
	 */
	public boolean hasLazy() {
		return ((bitField0_ & 0x00000004) == 0x00000004);
	}

	/**
	 * <code>optional bool lazy = 5 [default = false];</code>
	 * 
	 * <pre>
	 * Should this field be parsed lazily?  Lazy applies only to message-type
	 * fields.  It means that when the outer message is initially parsed, the
	 * inner message's contents will not be parsed but instead stored in encoded
	 * form.  The inner message will actually be parsed when it is first accessed.
	 * 
	 * This is only a hint.  Implementations are free to choose whether to use
	 * eager or lazy parsing regardless of the value of this option.  However,
	 * setting this option true suggests that the protocol author believes that
	 * using lazy parsing on this field is worth the additional bookkeeping
	 * overhead typically needed to implement it.
	 * 
	 * This option does not affect the public interface of any generated code;
	 * all method signatures remain the same.  Furthermore, thread-safety of the
	 * interface is not affected by this option; const methods remain safe to
	 * call from multiple threads concurrently, while non-const methods continue
	 * to require exclusive access.
	 * 
	 * 
	 * Note that implementations may choose not to check required fields within
	 * a lazy sub-message.  That is, calling IsInitialized() on the outher message
	 * may return true even if the inner message has missing required fields.
	 * This is necessary because otherwise the inner message would have to be
	 * parsed in order to perform the check, defeating the purpose of lazy
	 * parsing.  An implementation which chooses not to check required fields
	 * must be consistent about it.  That is, for any particular sub-message, the
	 * implementation must either *always* check its required fields, or *never*
	 * check its required fields, regardless of whether or not the message has
	 * been parsed.
	 * </pre>
	 */
	public boolean getLazy() {
		return lazy_;
	}

	// optional bool deprecated = 3 [default = false];
	public static final int DEPRECATED_FIELD_NUMBER = 3;
	private boolean deprecated_;

	/**
	 * <code>optional bool deprecated = 3 [default = false];</code>
	 * 
	 * <pre>
	 * Is this field deprecated?
	 * Depending on the target platform, this can emit Deprecated annotations
	 * for accessors, or it will be completely ignored; in the very least, this
	 * is a formalization for deprecating fields.
	 * </pre>
	 */
	public boolean hasDeprecated() {
		return ((bitField0_ & 0x00000008) == 0x00000008);
	}

	/**
	 * <code>optional bool deprecated = 3 [default = false];</code>
	 * 
	 * <pre>
	 * Is this field deprecated?
	 * Depending on the target platform, this can emit Deprecated annotations
	 * for accessors, or it will be completely ignored; in the very least, this
	 * is a formalization for deprecating fields.
	 * </pre>
	 */
	public boolean getDeprecated() {
		return deprecated_;
	}

	// optional string experimental_map_key = 9;
	public static final int EXPERIMENTAL_MAP_KEY_FIELD_NUMBER = 9;
	private java.lang.Object experimentalMapKey_;

	/**
	 * <code>optional string experimental_map_key = 9;</code>
	 * 
	 * <pre>
	 * EXPERIMENTAL.  DO NOT USE.
	 * For "map" fields, the name of the field in the enclosed type that
	 * is the key for this map.  For example, suppose we have:
	 *   message Item {
	 *     required string name = 1;
	 *     required string value = 2;
	 *   }
	 *   message Config {
	 *     repeated Item items = 1 [experimental_map_key="name"];
	 *   }
	 * In this situation, the map key for Item will be set to "name".
	 * TODO: Fully-implement this, then remove the "experimental_" prefix.
	 * </pre>
	 */
	public boolean hasExperimentalMapKey() {
		return ((bitField0_ & 0x00000010) == 0x00000010);
	}

	/**
	 * <code>optional string experimental_map_key = 9;</code>
	 * 
	 * <pre>
	 * EXPERIMENTAL.  DO NOT USE.
	 * For "map" fields, the name of the field in the enclosed type that
	 * is the key for this map.  For example, suppose we have:
	 *   message Item {
	 *     required string name = 1;
	 *     required string value = 2;
	 *   }
	 *   message Config {
	 *     repeated Item items = 1 [experimental_map_key="name"];
	 *   }
	 * In this situation, the map key for Item will be set to "name".
	 * TODO: Fully-implement this, then remove the "experimental_" prefix.
	 * </pre>
	 */
	public java.lang.String getExperimentalMapKey() {
		java.lang.Object ref = experimentalMapKey_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			if (bs.isValidUtf8()) {
				experimentalMapKey_ = s;
			}
			return s;
		}
	}

	/**
	 * <code>optional string experimental_map_key = 9;</code>
	 * 
	 * <pre>
	 * EXPERIMENTAL.  DO NOT USE.
	 * For "map" fields, the name of the field in the enclosed type that
	 * is the key for this map.  For example, suppose we have:
	 *   message Item {
	 *     required string name = 1;
	 *     required string value = 2;
	 *   }
	 *   message Config {
	 *     repeated Item items = 1 [experimental_map_key="name"];
	 *   }
	 * In this situation, the map key for Item will be set to "name".
	 * TODO: Fully-implement this, then remove the "experimental_" prefix.
	 * </pre>
	 */
	public com.google.protobuf.ByteString getExperimentalMapKeyBytes() {
		java.lang.Object ref = experimentalMapKey_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b = com.google.protobuf.ByteString
					.copyFromUtf8((java.lang.String) ref);
			experimentalMapKey_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	// optional bool weak = 10 [default = false];
	public static final int WEAK_FIELD_NUMBER = 10;
	private boolean weak_;

	/**
	 * <code>optional bool weak = 10 [default = false];</code>
	 * 
	 * <pre>
	 * For Google-internal migration only. Do not use.
	 * </pre>
	 */
	public boolean hasWeak() {
		return ((bitField0_ & 0x00000020) == 0x00000020);
	}

	/**
	 * <code>optional bool weak = 10 [default = false];</code>
	 * 
	 * <pre>
	 * For Google-internal migration only. Do not use.
	 * </pre>
	 */
	public boolean getWeak() {
		return weak_;
	}

	// repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;
	public static final int UNINTERPRETED_OPTION_FIELD_NUMBER = 999;
	private java.util.List<com.google.protobuf.UninterpretedOption> uninterpretedOption_;

	/**
	 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
	 * 
	 * <pre>
	 * The parser stores options it doesn't recognize here. See above.
	 * </pre>
	 */
	public java.util.List<com.google.protobuf.UninterpretedOption> getUninterpretedOptionList() {
		return uninterpretedOption_;
	}

	/**
	 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
	 * 
	 * <pre>
	 * The parser stores options it doesn't recognize here. See above.
	 * </pre>
	 */
	public java.util.List<? extends com.google.protobuf.UninterpretedOptionOrBuilder> getUninterpretedOptionOrBuilderList() {
		return uninterpretedOption_;
	}

	/**
	 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
	 * 
	 * <pre>
	 * The parser stores options it doesn't recognize here. See above.
	 * </pre>
	 */
	public int getUninterpretedOptionCount() {
		return uninterpretedOption_.size();
	}

	/**
	 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
	 * 
	 * <pre>
	 * The parser stores options it doesn't recognize here. See above.
	 * </pre>
	 */
	public com.google.protobuf.UninterpretedOption getUninterpretedOption(
			int index) {
		return uninterpretedOption_.get(index);
	}

	/**
	 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
	 * 
	 * <pre>
	 * The parser stores options it doesn't recognize here. See above.
	 * </pre>
	 */
	public com.google.protobuf.UninterpretedOptionOrBuilder getUninterpretedOptionOrBuilder(
			int index) {
		return uninterpretedOption_.get(index);
	}

	private void initFields() {
		ctype_ = com.google.protobuf.FieldOptions.CType.STRING;
		packed_ = false;
		lazy_ = false;
		deprecated_ = false;
		experimentalMapKey_ = "";
		weak_ = false;
		uninterpretedOption_ = java.util.Collections.emptyList();
	}

	private byte memoizedIsInitialized = -1;

	public final boolean isInitialized() {
		byte isInitialized = memoizedIsInitialized;
		if (isInitialized != -1)
			return isInitialized == 1;

		for (int i = 0; i < getUninterpretedOptionCount(); i++) {
			if (!getUninterpretedOption(i).isInitialized()) {
				memoizedIsInitialized = 0;
				return false;
			}
		}
		if (!extensionsAreInitialized()) {
			memoizedIsInitialized = 0;
			return false;
		}
		memoizedIsInitialized = 1;
		return true;
	}

	public void writeTo(com.google.protobuf.CodedOutputStream output)
			throws java.io.IOException {
		getSerializedSize();
		com.google.protobuf.GeneratedMessage.ExtendableMessage<com.google.protobuf.FieldOptions>.ExtensionWriter extensionWriter = newExtensionWriter();
		if (((bitField0_ & 0x00000001) == 0x00000001)) {
			output.writeEnum(1, ctype_.getNumber());
		}
		if (((bitField0_ & 0x00000002) == 0x00000002)) {
			output.writeBool(2, packed_);
		}
		if (((bitField0_ & 0x00000008) == 0x00000008)) {
			output.writeBool(3, deprecated_);
		}
		if (((bitField0_ & 0x00000004) == 0x00000004)) {
			output.writeBool(5, lazy_);
		}
		if (((bitField0_ & 0x00000010) == 0x00000010)) {
			output.writeBytes(9, getExperimentalMapKeyBytes());
		}
		if (((bitField0_ & 0x00000020) == 0x00000020)) {
			output.writeBool(10, weak_);
		}
		for (int i = 0; i < uninterpretedOption_.size(); i++) {
			output.writeMessage(999, uninterpretedOption_.get(i));
		}
		extensionWriter.writeUntil(536870912, output);
		getUnknownFields().writeTo(output);
	}

	private int memoizedSerializedSize = -1;

	public int getSerializedSize() {
		int size = memoizedSerializedSize;
		if (size != -1)
			return size;

		size = 0;
		if (((bitField0_ & 0x00000001) == 0x00000001)) {
			size += com.google.protobuf.CodedOutputStream.computeEnumSize(1,
					ctype_.getNumber());
		}
		if (((bitField0_ & 0x00000002) == 0x00000002)) {
			size += com.google.protobuf.CodedOutputStream.computeBoolSize(2,
					packed_);
		}
		if (((bitField0_ & 0x00000008) == 0x00000008)) {
			size += com.google.protobuf.CodedOutputStream.computeBoolSize(3,
					deprecated_);
		}
		if (((bitField0_ & 0x00000004) == 0x00000004)) {
			size += com.google.protobuf.CodedOutputStream.computeBoolSize(5,
					lazy_);
		}
		if (((bitField0_ & 0x00000010) == 0x00000010)) {
			size += com.google.protobuf.CodedOutputStream.computeBytesSize(9,
					getExperimentalMapKeyBytes());
		}
		if (((bitField0_ & 0x00000020) == 0x00000020)) {
			size += com.google.protobuf.CodedOutputStream.computeBoolSize(10,
					weak_);
		}
		for (int i = 0; i < uninterpretedOption_.size(); i++) {
			size += com.google.protobuf.CodedOutputStream.computeMessageSize(
					999, uninterpretedOption_.get(i));
		}
		size += extensionsSerializedSize();
		size += getUnknownFields().getSerializedSize();
		memoizedSerializedSize = size;
		return size;
	}

	private static final long serialVersionUID = 0L;

	@java.lang.Override
	protected java.lang.Object writeReplace()
			throws java.io.ObjectStreamException {
		return super.writeReplace();
	}

	public static com.google.protobuf.FieldOptions parseFrom(
			com.google.protobuf.ByteString data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static com.google.protobuf.FieldOptions parseFrom(
			com.google.protobuf.ByteString data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static com.google.protobuf.FieldOptions parseFrom(byte[] data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static com.google.protobuf.FieldOptions parseFrom(byte[] data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static com.google.protobuf.FieldOptions parseFrom(
			java.io.InputStream input) throws java.io.IOException {
		return PARSER.parseFrom(input);
	}

	public static com.google.protobuf.FieldOptions parseFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return PARSER.parseFrom(input, extensionRegistry);
	}

	public static com.google.protobuf.FieldOptions parseDelimitedFrom(
			java.io.InputStream input) throws java.io.IOException {
		return PARSER.parseDelimitedFrom(input);
	}

	public static com.google.protobuf.FieldOptions parseDelimitedFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return PARSER.parseDelimitedFrom(input, extensionRegistry);
	}

	public static com.google.protobuf.FieldOptions parseFrom(
			com.google.protobuf.CodedInputStream input)
			throws java.io.IOException {
		return PARSER.parseFrom(input);
	}

	public static com.google.protobuf.FieldOptions parseFrom(
			com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return PARSER.parseFrom(input, extensionRegistry);
	}

	public static Builder newBuilder() {
		return Builder.create();
	}

	public Builder newBuilderForType() {
		return newBuilder();
	}

	public static Builder newBuilder(com.google.protobuf.FieldOptions prototype) {
		return newBuilder().mergeFrom(prototype);
	}

	public Builder toBuilder() {
		return newBuilder(this);
	}

	@java.lang.Override
	protected Builder newBuilderForType(
			com.google.protobuf.GeneratedMessage.BuilderParent parent) {
		Builder builder = new Builder(parent);
		return builder;
	}

	/**
	 * Protobuf type {@code google.protobuf.FieldOptions}
	 */
	public static final class Builder
			extends
			com.google.protobuf.GeneratedMessage.ExtendableBuilder<com.google.protobuf.FieldOptions, Builder>
			implements com.google.protobuf.FieldOptionsOrBuilder {
		public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
			return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldOptions_descriptor;
		}

		protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
			return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldOptions_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							com.google.protobuf.FieldOptions.class,
							com.google.protobuf.FieldOptions.Builder.class);
		}

		// Construct using com.google.protobuf.FieldOptions.newBuilder()
		private Builder() {
			maybeForceBuilderInitialization();
		}

		private Builder(
				com.google.protobuf.GeneratedMessage.BuilderParent parent) {
			super(parent);
			maybeForceBuilderInitialization();
		}

		private void maybeForceBuilderInitialization() {
			if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
				getUninterpretedOptionFieldBuilder();
			}
		}

		private static Builder create() {
			return new Builder();
		}

		public Builder clear() {
			super.clear();
			ctype_ = com.google.protobuf.FieldOptions.CType.STRING;
			bitField0_ = (bitField0_ & ~0x00000001);
			packed_ = false;
			bitField0_ = (bitField0_ & ~0x00000002);
			lazy_ = false;
			bitField0_ = (bitField0_ & ~0x00000004);
			deprecated_ = false;
			bitField0_ = (bitField0_ & ~0x00000008);
			experimentalMapKey_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			weak_ = false;
			bitField0_ = (bitField0_ & ~0x00000020);
			if (uninterpretedOptionBuilder_ == null) {
				uninterpretedOption_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000040);
			} else {
				uninterpretedOptionBuilder_.clear();
			}
			return this;
		}

		public Builder clone() {
			return create().mergeFrom(buildPartial());
		}

		public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
			return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldOptions_descriptor;
		}

		public com.google.protobuf.FieldOptions getDefaultInstanceForType() {
			return com.google.protobuf.FieldOptions.getDefaultInstance();
		}

		public com.google.protobuf.FieldOptions build() {
			com.google.protobuf.FieldOptions result = buildPartial();
			if (!result.isInitialized()) {
				throw newUninitializedMessageException(result);
			}
			return result;
		}

		public com.google.protobuf.FieldOptions buildPartial() {
			com.google.protobuf.FieldOptions result = new com.google.protobuf.FieldOptions(
					this);
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
				to_bitField0_ |= 0x00000001;
			}
			result.ctype_ = ctype_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
				to_bitField0_ |= 0x00000002;
			}
			result.packed_ = packed_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
				to_bitField0_ |= 0x00000004;
			}
			result.lazy_ = lazy_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
				to_bitField0_ |= 0x00000008;
			}
			result.deprecated_ = deprecated_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
				to_bitField0_ |= 0x00000010;
			}
			result.experimentalMapKey_ = experimentalMapKey_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
				to_bitField0_ |= 0x00000020;
			}
			result.weak_ = weak_;
			if (uninterpretedOptionBuilder_ == null) {
				if (((bitField0_ & 0x00000040) == 0x00000040)) {
					uninterpretedOption_ = java.util.Collections
							.unmodifiableList(uninterpretedOption_);
					bitField0_ = (bitField0_ & ~0x00000040);
				}
				result.uninterpretedOption_ = uninterpretedOption_;
			} else {
				result.uninterpretedOption_ = uninterpretedOptionBuilder_
						.build();
			}
			result.bitField0_ = to_bitField0_;
			onBuilt();
			return result;
		}

		public Builder mergeFrom(com.google.protobuf.Message other) {
			if (other instanceof com.google.protobuf.FieldOptions) {
				return mergeFrom((com.google.protobuf.FieldOptions) other);
			} else {
				super.mergeFrom(other);
				return this;
			}
		}

		public Builder mergeFrom(com.google.protobuf.FieldOptions other) {
			if (other == com.google.protobuf.FieldOptions.getDefaultInstance())
				return this;
			if (other.hasCtype()) {
				setCtype(other.getCtype());
			}
			if (other.hasPacked()) {
				setPacked(other.getPacked());
			}
			if (other.hasLazy()) {
				setLazy(other.getLazy());
			}
			if (other.hasDeprecated()) {
				setDeprecated(other.getDeprecated());
			}
			if (other.hasExperimentalMapKey()) {
				bitField0_ |= 0x00000010;
				experimentalMapKey_ = other.experimentalMapKey_;
				onChanged();
			}
			if (other.hasWeak()) {
				setWeak(other.getWeak());
			}
			if (uninterpretedOptionBuilder_ == null) {
				if (!other.uninterpretedOption_.isEmpty()) {
					if (uninterpretedOption_.isEmpty()) {
						uninterpretedOption_ = other.uninterpretedOption_;
						bitField0_ = (bitField0_ & ~0x00000040);
					} else {
						ensureUninterpretedOptionIsMutable();
						uninterpretedOption_.addAll(other.uninterpretedOption_);
					}
					onChanged();
				}
			} else {
				if (!other.uninterpretedOption_.isEmpty()) {
					if (uninterpretedOptionBuilder_.isEmpty()) {
						uninterpretedOptionBuilder_.dispose();
						uninterpretedOptionBuilder_ = null;
						uninterpretedOption_ = other.uninterpretedOption_;
						bitField0_ = (bitField0_ & ~0x00000040);
						uninterpretedOptionBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getUninterpretedOptionFieldBuilder()
								: null;
					} else {
						uninterpretedOptionBuilder_
								.addAllMessages(other.uninterpretedOption_);
					}
				}
			}
			this.mergeExtensionFields(other);
			this.mergeUnknownFields(other.getUnknownFields());
			return this;
		}

		public final boolean isInitialized() {
			for (int i = 0; i < getUninterpretedOptionCount(); i++) {
				if (!getUninterpretedOption(i).isInitialized()) {

					return false;
				}
			}
			if (!extensionsAreInitialized()) {

				return false;
			}
			return true;
		}

		public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			com.google.protobuf.FieldOptions parsedMessage = null;
			try {
				parsedMessage = PARSER.parsePartialFrom(input,
						extensionRegistry);
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				parsedMessage = (com.google.protobuf.FieldOptions) e
						.getUnfinishedMessage();
				throw e;
			} finally {
				if (parsedMessage != null) {
					mergeFrom(parsedMessage);
				}
			}
			return this;
		}

		private int bitField0_;

		// optional .google.protobuf.FieldOptions.CType ctype = 1 [default =
		// STRING];
		private com.google.protobuf.FieldOptions.CType ctype_ = com.google.protobuf.FieldOptions.CType.STRING;

		/**
		 * <code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>
		 * 
		 * <pre>
		 * The ctype option instructs the C++ code generator to use a different
		 * representation of the field than it normally would.  See the specific
		 * options below.  This option is not yet implemented in the open source
		 * release -- sorry, we'll try to include it in a future version!
		 * </pre>
		 */
		public boolean hasCtype() {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>
		 * 
		 * <pre>
		 * The ctype option instructs the C++ code generator to use a different
		 * representation of the field than it normally would.  See the specific
		 * options below.  This option is not yet implemented in the open source
		 * release -- sorry, we'll try to include it in a future version!
		 * </pre>
		 */
		public com.google.protobuf.FieldOptions.CType getCtype() {
			return ctype_;
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>
		 * 
		 * <pre>
		 * The ctype option instructs the C++ code generator to use a different
		 * representation of the field than it normally would.  See the specific
		 * options below.  This option is not yet implemented in the open source
		 * release -- sorry, we'll try to include it in a future version!
		 * </pre>
		 */
		public Builder setCtype(com.google.protobuf.FieldOptions.CType value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000001;
			ctype_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions.CType ctype = 1 [default = STRING];</code>
		 * 
		 * <pre>
		 * The ctype option instructs the C++ code generator to use a different
		 * representation of the field than it normally would.  See the specific
		 * options below.  This option is not yet implemented in the open source
		 * release -- sorry, we'll try to include it in a future version!
		 * </pre>
		 */
		public Builder clearCtype() {
			bitField0_ = (bitField0_ & ~0x00000001);
			ctype_ = com.google.protobuf.FieldOptions.CType.STRING;
			onChanged();
			return this;
		}

		// optional bool packed = 2;
		private boolean packed_;

		/**
		 * <code>optional bool packed = 2;</code>
		 * 
		 * <pre>
		 * The packed option can be enabled for repeated primitive fields to enable
		 * a more efficient representation on the wire. Rather than repeatedly
		 * writing the tag and type for each element, the entire array is encoded as
		 * a single length-delimited blob.
		 * </pre>
		 */
		public boolean hasPacked() {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		}

		/**
		 * <code>optional bool packed = 2;</code>
		 * 
		 * <pre>
		 * The packed option can be enabled for repeated primitive fields to enable
		 * a more efficient representation on the wire. Rather than repeatedly
		 * writing the tag and type for each element, the entire array is encoded as
		 * a single length-delimited blob.
		 * </pre>
		 */
		public boolean getPacked() {
			return packed_;
		}

		/**
		 * <code>optional bool packed = 2;</code>
		 * 
		 * <pre>
		 * The packed option can be enabled for repeated primitive fields to enable
		 * a more efficient representation on the wire. Rather than repeatedly
		 * writing the tag and type for each element, the entire array is encoded as
		 * a single length-delimited blob.
		 * </pre>
		 */
		public Builder setPacked(boolean value) {
			bitField0_ |= 0x00000002;
			packed_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional bool packed = 2;</code>
		 * 
		 * <pre>
		 * The packed option can be enabled for repeated primitive fields to enable
		 * a more efficient representation on the wire. Rather than repeatedly
		 * writing the tag and type for each element, the entire array is encoded as
		 * a single length-delimited blob.
		 * </pre>
		 */
		public Builder clearPacked() {
			bitField0_ = (bitField0_ & ~0x00000002);
			packed_ = false;
			onChanged();
			return this;
		}

		// optional bool lazy = 5 [default = false];
		private boolean lazy_;

		/**
		 * <code>optional bool lazy = 5 [default = false];</code>
		 * 
		 * <pre>
		 * Should this field be parsed lazily?  Lazy applies only to message-type
		 * fields.  It means that when the outer message is initially parsed, the
		 * inner message's contents will not be parsed but instead stored in encoded
		 * form.  The inner message will actually be parsed when it is first accessed.
		 * 
		 * This is only a hint.  Implementations are free to choose whether to use
		 * eager or lazy parsing regardless of the value of this option.  However,
		 * setting this option true suggests that the protocol author believes that
		 * using lazy parsing on this field is worth the additional bookkeeping
		 * overhead typically needed to implement it.
		 * 
		 * This option does not affect the public interface of any generated code;
		 * all method signatures remain the same.  Furthermore, thread-safety of the
		 * interface is not affected by this option; const methods remain safe to
		 * call from multiple threads concurrently, while non-const methods continue
		 * to require exclusive access.
		 * 
		 * 
		 * Note that implementations may choose not to check required fields within
		 * a lazy sub-message.  That is, calling IsInitialized() on the outher message
		 * may return true even if the inner message has missing required fields.
		 * This is necessary because otherwise the inner message would have to be
		 * parsed in order to perform the check, defeating the purpose of lazy
		 * parsing.  An implementation which chooses not to check required fields
		 * must be consistent about it.  That is, for any particular sub-message, the
		 * implementation must either *always* check its required fields, or *never*
		 * check its required fields, regardless of whether or not the message has
		 * been parsed.
		 * </pre>
		 */
		public boolean hasLazy() {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		}

		/**
		 * <code>optional bool lazy = 5 [default = false];</code>
		 * 
		 * <pre>
		 * Should this field be parsed lazily?  Lazy applies only to message-type
		 * fields.  It means that when the outer message is initially parsed, the
		 * inner message's contents will not be parsed but instead stored in encoded
		 * form.  The inner message will actually be parsed when it is first accessed.
		 * 
		 * This is only a hint.  Implementations are free to choose whether to use
		 * eager or lazy parsing regardless of the value of this option.  However,
		 * setting this option true suggests that the protocol author believes that
		 * using lazy parsing on this field is worth the additional bookkeeping
		 * overhead typically needed to implement it.
		 * 
		 * This option does not affect the public interface of any generated code;
		 * all method signatures remain the same.  Furthermore, thread-safety of the
		 * interface is not affected by this option; const methods remain safe to
		 * call from multiple threads concurrently, while non-const methods continue
		 * to require exclusive access.
		 * 
		 * 
		 * Note that implementations may choose not to check required fields within
		 * a lazy sub-message.  That is, calling IsInitialized() on the outher message
		 * may return true even if the inner message has missing required fields.
		 * This is necessary because otherwise the inner message would have to be
		 * parsed in order to perform the check, defeating the purpose of lazy
		 * parsing.  An implementation which chooses not to check required fields
		 * must be consistent about it.  That is, for any particular sub-message, the
		 * implementation must either *always* check its required fields, or *never*
		 * check its required fields, regardless of whether or not the message has
		 * been parsed.
		 * </pre>
		 */
		public boolean getLazy() {
			return lazy_;
		}

		/**
		 * <code>optional bool lazy = 5 [default = false];</code>
		 * 
		 * <pre>
		 * Should this field be parsed lazily?  Lazy applies only to message-type
		 * fields.  It means that when the outer message is initially parsed, the
		 * inner message's contents will not be parsed but instead stored in encoded
		 * form.  The inner message will actually be parsed when it is first accessed.
		 * 
		 * This is only a hint.  Implementations are free to choose whether to use
		 * eager or lazy parsing regardless of the value of this option.  However,
		 * setting this option true suggests that the protocol author believes that
		 * using lazy parsing on this field is worth the additional bookkeeping
		 * overhead typically needed to implement it.
		 * 
		 * This option does not affect the public interface of any generated code;
		 * all method signatures remain the same.  Furthermore, thread-safety of the
		 * interface is not affected by this option; const methods remain safe to
		 * call from multiple threads concurrently, while non-const methods continue
		 * to require exclusive access.
		 * 
		 * 
		 * Note that implementations may choose not to check required fields within
		 * a lazy sub-message.  That is, calling IsInitialized() on the outher message
		 * may return true even if the inner message has missing required fields.
		 * This is necessary because otherwise the inner message would have to be
		 * parsed in order to perform the check, defeating the purpose of lazy
		 * parsing.  An implementation which chooses not to check required fields
		 * must be consistent about it.  That is, for any particular sub-message, the
		 * implementation must either *always* check its required fields, or *never*
		 * check its required fields, regardless of whether or not the message has
		 * been parsed.
		 * </pre>
		 */
		public Builder setLazy(boolean value) {
			bitField0_ |= 0x00000004;
			lazy_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional bool lazy = 5 [default = false];</code>
		 * 
		 * <pre>
		 * Should this field be parsed lazily?  Lazy applies only to message-type
		 * fields.  It means that when the outer message is initially parsed, the
		 * inner message's contents will not be parsed but instead stored in encoded
		 * form.  The inner message will actually be parsed when it is first accessed.
		 * 
		 * This is only a hint.  Implementations are free to choose whether to use
		 * eager or lazy parsing regardless of the value of this option.  However,
		 * setting this option true suggests that the protocol author believes that
		 * using lazy parsing on this field is worth the additional bookkeeping
		 * overhead typically needed to implement it.
		 * 
		 * This option does not affect the public interface of any generated code;
		 * all method signatures remain the same.  Furthermore, thread-safety of the
		 * interface is not affected by this option; const methods remain safe to
		 * call from multiple threads concurrently, while non-const methods continue
		 * to require exclusive access.
		 * 
		 * 
		 * Note that implementations may choose not to check required fields within
		 * a lazy sub-message.  That is, calling IsInitialized() on the outher message
		 * may return true even if the inner message has missing required fields.
		 * This is necessary because otherwise the inner message would have to be
		 * parsed in order to perform the check, defeating the purpose of lazy
		 * parsing.  An implementation which chooses not to check required fields
		 * must be consistent about it.  That is, for any particular sub-message, the
		 * implementation must either *always* check its required fields, or *never*
		 * check its required fields, regardless of whether or not the message has
		 * been parsed.
		 * </pre>
		 */
		public Builder clearLazy() {
			bitField0_ = (bitField0_ & ~0x00000004);
			lazy_ = false;
			onChanged();
			return this;
		}

		// optional bool deprecated = 3 [default = false];
		private boolean deprecated_;

		/**
		 * <code>optional bool deprecated = 3 [default = false];</code>
		 * 
		 * <pre>
		 * Is this field deprecated?
		 * Depending on the target platform, this can emit Deprecated annotations
		 * for accessors, or it will be completely ignored; in the very least, this
		 * is a formalization for deprecating fields.
		 * </pre>
		 */
		public boolean hasDeprecated() {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		}

		/**
		 * <code>optional bool deprecated = 3 [default = false];</code>
		 * 
		 * <pre>
		 * Is this field deprecated?
		 * Depending on the target platform, this can emit Deprecated annotations
		 * for accessors, or it will be completely ignored; in the very least, this
		 * is a formalization for deprecating fields.
		 * </pre>
		 */
		public boolean getDeprecated() {
			return deprecated_;
		}

		/**
		 * <code>optional bool deprecated = 3 [default = false];</code>
		 * 
		 * <pre>
		 * Is this field deprecated?
		 * Depending on the target platform, this can emit Deprecated annotations
		 * for accessors, or it will be completely ignored; in the very least, this
		 * is a formalization for deprecating fields.
		 * </pre>
		 */
		public Builder setDeprecated(boolean value) {
			bitField0_ |= 0x00000008;
			deprecated_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional bool deprecated = 3 [default = false];</code>
		 * 
		 * <pre>
		 * Is this field deprecated?
		 * Depending on the target platform, this can emit Deprecated annotations
		 * for accessors, or it will be completely ignored; in the very least, this
		 * is a formalization for deprecating fields.
		 * </pre>
		 */
		public Builder clearDeprecated() {
			bitField0_ = (bitField0_ & ~0x00000008);
			deprecated_ = false;
			onChanged();
			return this;
		}

		// optional string experimental_map_key = 9;
		private java.lang.Object experimentalMapKey_ = "";

		/**
		 * <code>optional string experimental_map_key = 9;</code>
		 * 
		 * <pre>
		 * EXPERIMENTAL.  DO NOT USE.
		 * For "map" fields, the name of the field in the enclosed type that
		 * is the key for this map.  For example, suppose we have:
		 *   message Item {
		 *     required string name = 1;
		 *     required string value = 2;
		 *   }
		 *   message Config {
		 *     repeated Item items = 1 [experimental_map_key="name"];
		 *   }
		 * In this situation, the map key for Item will be set to "name".
		 * TODO: Fully-implement this, then remove the "experimental_" prefix.
		 * </pre>
		 */
		public boolean hasExperimentalMapKey() {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		}

		/**
		 * <code>optional string experimental_map_key = 9;</code>
		 * 
		 * <pre>
		 * EXPERIMENTAL.  DO NOT USE.
		 * For "map" fields, the name of the field in the enclosed type that
		 * is the key for this map.  For example, suppose we have:
		 *   message Item {
		 *     required string name = 1;
		 *     required string value = 2;
		 *   }
		 *   message Config {
		 *     repeated Item items = 1 [experimental_map_key="name"];
		 *   }
		 * In this situation, the map key for Item will be set to "name".
		 * TODO: Fully-implement this, then remove the "experimental_" prefix.
		 * </pre>
		 */
		public java.lang.String getExperimentalMapKey() {
			java.lang.Object ref = experimentalMapKey_;
			if (!(ref instanceof java.lang.String)) {
				java.lang.String s = ((com.google.protobuf.ByteString) ref)
						.toStringUtf8();
				experimentalMapKey_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <code>optional string experimental_map_key = 9;</code>
		 * 
		 * <pre>
		 * EXPERIMENTAL.  DO NOT USE.
		 * For "map" fields, the name of the field in the enclosed type that
		 * is the key for this map.  For example, suppose we have:
		 *   message Item {
		 *     required string name = 1;
		 *     required string value = 2;
		 *   }
		 *   message Config {
		 *     repeated Item items = 1 [experimental_map_key="name"];
		 *   }
		 * In this situation, the map key for Item will be set to "name".
		 * TODO: Fully-implement this, then remove the "experimental_" prefix.
		 * </pre>
		 */
		public com.google.protobuf.ByteString getExperimentalMapKeyBytes() {
			java.lang.Object ref = experimentalMapKey_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString
						.copyFromUtf8((java.lang.String) ref);
				experimentalMapKey_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <code>optional string experimental_map_key = 9;</code>
		 * 
		 * <pre>
		 * EXPERIMENTAL.  DO NOT USE.
		 * For "map" fields, the name of the field in the enclosed type that
		 * is the key for this map.  For example, suppose we have:
		 *   message Item {
		 *     required string name = 1;
		 *     required string value = 2;
		 *   }
		 *   message Config {
		 *     repeated Item items = 1 [experimental_map_key="name"];
		 *   }
		 * In this situation, the map key for Item will be set to "name".
		 * TODO: Fully-implement this, then remove the "experimental_" prefix.
		 * </pre>
		 */
		public Builder setExperimentalMapKey(java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000010;
			experimentalMapKey_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional string experimental_map_key = 9;</code>
		 * 
		 * <pre>
		 * EXPERIMENTAL.  DO NOT USE.
		 * For "map" fields, the name of the field in the enclosed type that
		 * is the key for this map.  For example, suppose we have:
		 *   message Item {
		 *     required string name = 1;
		 *     required string value = 2;
		 *   }
		 *   message Config {
		 *     repeated Item items = 1 [experimental_map_key="name"];
		 *   }
		 * In this situation, the map key for Item will be set to "name".
		 * TODO: Fully-implement this, then remove the "experimental_" prefix.
		 * </pre>
		 */
		public Builder clearExperimentalMapKey() {
			bitField0_ = (bitField0_ & ~0x00000010);
			experimentalMapKey_ = getDefaultInstance().getExperimentalMapKey();
			onChanged();
			return this;
		}

		/**
		 * <code>optional string experimental_map_key = 9;</code>
		 * 
		 * <pre>
		 * EXPERIMENTAL.  DO NOT USE.
		 * For "map" fields, the name of the field in the enclosed type that
		 * is the key for this map.  For example, suppose we have:
		 *   message Item {
		 *     required string name = 1;
		 *     required string value = 2;
		 *   }
		 *   message Config {
		 *     repeated Item items = 1 [experimental_map_key="name"];
		 *   }
		 * In this situation, the map key for Item will be set to "name".
		 * TODO: Fully-implement this, then remove the "experimental_" prefix.
		 * </pre>
		 */
		public Builder setExperimentalMapKeyBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000010;
			experimentalMapKey_ = value;
			onChanged();
			return this;
		}

		// optional bool weak = 10 [default = false];
		private boolean weak_;

		/**
		 * <code>optional bool weak = 10 [default = false];</code>
		 * 
		 * <pre>
		 * For Google-internal migration only. Do not use.
		 * </pre>
		 */
		public boolean hasWeak() {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		}

		/**
		 * <code>optional bool weak = 10 [default = false];</code>
		 * 
		 * <pre>
		 * For Google-internal migration only. Do not use.
		 * </pre>
		 */
		public boolean getWeak() {
			return weak_;
		}

		/**
		 * <code>optional bool weak = 10 [default = false];</code>
		 * 
		 * <pre>
		 * For Google-internal migration only. Do not use.
		 * </pre>
		 */
		public Builder setWeak(boolean value) {
			bitField0_ |= 0x00000020;
			weak_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional bool weak = 10 [default = false];</code>
		 * 
		 * <pre>
		 * For Google-internal migration only. Do not use.
		 * </pre>
		 */
		public Builder clearWeak() {
			bitField0_ = (bitField0_ & ~0x00000020);
			weak_ = false;
			onChanged();
			return this;
		}

		// repeated .google.protobuf.UninterpretedOption uninterpreted_option =
		// 999;
		private java.util.List<com.google.protobuf.UninterpretedOption> uninterpretedOption_ = java.util.Collections
				.emptyList();

		private void ensureUninterpretedOptionIsMutable() {
			if (!((bitField0_ & 0x00000040) == 0x00000040)) {
				uninterpretedOption_ = new java.util.ArrayList<com.google.protobuf.UninterpretedOption>(
						uninterpretedOption_);
				bitField0_ |= 0x00000040;
			}
		}

		private com.google.protobuf.RepeatedFieldBuilder<com.google.protobuf.UninterpretedOption, com.google.protobuf.UninterpretedOption.Builder, com.google.protobuf.UninterpretedOptionOrBuilder> uninterpretedOptionBuilder_;

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public java.util.List<com.google.protobuf.UninterpretedOption> getUninterpretedOptionList() {
			if (uninterpretedOptionBuilder_ == null) {
				return java.util.Collections
						.unmodifiableList(uninterpretedOption_);
			} else {
				return uninterpretedOptionBuilder_.getMessageList();
			}
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public int getUninterpretedOptionCount() {
			if (uninterpretedOptionBuilder_ == null) {
				return uninterpretedOption_.size();
			} else {
				return uninterpretedOptionBuilder_.getCount();
			}
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public com.google.protobuf.UninterpretedOption getUninterpretedOption(
				int index) {
			if (uninterpretedOptionBuilder_ == null) {
				return uninterpretedOption_.get(index);
			} else {
				return uninterpretedOptionBuilder_.getMessage(index);
			}
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder setUninterpretedOption(int index,
				com.google.protobuf.UninterpretedOption value) {
			if (uninterpretedOptionBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.set(index, value);
				onChanged();
			} else {
				uninterpretedOptionBuilder_.setMessage(index, value);
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder setUninterpretedOption(int index,
				com.google.protobuf.UninterpretedOption.Builder builderForValue) {
			if (uninterpretedOptionBuilder_ == null) {
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.set(index, builderForValue.build());
				onChanged();
			} else {
				uninterpretedOptionBuilder_.setMessage(index,
						builderForValue.build());
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder addUninterpretedOption(
				com.google.protobuf.UninterpretedOption value) {
			if (uninterpretedOptionBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.add(value);
				onChanged();
			} else {
				uninterpretedOptionBuilder_.addMessage(value);
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder addUninterpretedOption(int index,
				com.google.protobuf.UninterpretedOption value) {
			if (uninterpretedOptionBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.add(index, value);
				onChanged();
			} else {
				uninterpretedOptionBuilder_.addMessage(index, value);
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder addUninterpretedOption(
				com.google.protobuf.UninterpretedOption.Builder builderForValue) {
			if (uninterpretedOptionBuilder_ == null) {
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.add(builderForValue.build());
				onChanged();
			} else {
				uninterpretedOptionBuilder_.addMessage(builderForValue.build());
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder addUninterpretedOption(int index,
				com.google.protobuf.UninterpretedOption.Builder builderForValue) {
			if (uninterpretedOptionBuilder_ == null) {
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.add(index, builderForValue.build());
				onChanged();
			} else {
				uninterpretedOptionBuilder_.addMessage(index,
						builderForValue.build());
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder addAllUninterpretedOption(
				java.lang.Iterable<? extends com.google.protobuf.UninterpretedOption> values) {
			if (uninterpretedOptionBuilder_ == null) {
				ensureUninterpretedOptionIsMutable();
				super.addAll(values, uninterpretedOption_);
				onChanged();
			} else {
				uninterpretedOptionBuilder_.addAllMessages(values);
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder clearUninterpretedOption() {
			if (uninterpretedOptionBuilder_ == null) {
				uninterpretedOption_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000040);
				onChanged();
			} else {
				uninterpretedOptionBuilder_.clear();
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public Builder removeUninterpretedOption(int index) {
			if (uninterpretedOptionBuilder_ == null) {
				ensureUninterpretedOptionIsMutable();
				uninterpretedOption_.remove(index);
				onChanged();
			} else {
				uninterpretedOptionBuilder_.remove(index);
			}
			return this;
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public com.google.protobuf.UninterpretedOption.Builder getUninterpretedOptionBuilder(
				int index) {
			return getUninterpretedOptionFieldBuilder().getBuilder(index);
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public com.google.protobuf.UninterpretedOptionOrBuilder getUninterpretedOptionOrBuilder(
				int index) {
			if (uninterpretedOptionBuilder_ == null) {
				return uninterpretedOption_.get(index);
			} else {
				return uninterpretedOptionBuilder_.getMessageOrBuilder(index);
			}
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public java.util.List<? extends com.google.protobuf.UninterpretedOptionOrBuilder> getUninterpretedOptionOrBuilderList() {
			if (uninterpretedOptionBuilder_ != null) {
				return uninterpretedOptionBuilder_.getMessageOrBuilderList();
			} else {
				return java.util.Collections
						.unmodifiableList(uninterpretedOption_);
			}
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public com.google.protobuf.UninterpretedOption.Builder addUninterpretedOptionBuilder() {
			return getUninterpretedOptionFieldBuilder().addBuilder(
					com.google.protobuf.UninterpretedOption
							.getDefaultInstance());
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public com.google.protobuf.UninterpretedOption.Builder addUninterpretedOptionBuilder(
				int index) {
			return getUninterpretedOptionFieldBuilder().addBuilder(
					index,
					com.google.protobuf.UninterpretedOption
							.getDefaultInstance());
		}

		/**
		 * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
		 * 
		 * <pre>
		 * The parser stores options it doesn't recognize here. See above.
		 * </pre>
		 */
		public java.util.List<com.google.protobuf.UninterpretedOption.Builder> getUninterpretedOptionBuilderList() {
			return getUninterpretedOptionFieldBuilder().getBuilderList();
		}

		private com.google.protobuf.RepeatedFieldBuilder<com.google.protobuf.UninterpretedOption, com.google.protobuf.UninterpretedOption.Builder, com.google.protobuf.UninterpretedOptionOrBuilder> getUninterpretedOptionFieldBuilder() {
			if (uninterpretedOptionBuilder_ == null) {
				uninterpretedOptionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.google.protobuf.UninterpretedOption, com.google.protobuf.UninterpretedOption.Builder, com.google.protobuf.UninterpretedOptionOrBuilder>(
						uninterpretedOption_,
						((bitField0_ & 0x00000040) == 0x00000040),
						getParentForChildren(), isClean());
				uninterpretedOption_ = null;
			}
			return uninterpretedOptionBuilder_;
		}

		// @@protoc_insertion_point(builder_scope:google.protobuf.FieldOptions)
	}

	static {
		defaultInstance = new FieldOptions(true);
		defaultInstance.initFields();
	}

	// @@protoc_insertion_point(class_scope:google.protobuf.FieldOptions)
}

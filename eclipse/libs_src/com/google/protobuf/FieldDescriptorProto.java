// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: descriptor.proto

package com.google.protobuf;

/**
 * Protobuf type {@code google.protobuf.FieldDescriptorProto}
 * 
 * <pre>
 * Describes a field within a message.
 * </pre>
 */
public final class FieldDescriptorProto extends
		com.google.protobuf.GeneratedMessage implements
		FieldDescriptorProtoOrBuilder {
	// Use FieldDescriptorProto.newBuilder() to construct.
	private FieldDescriptorProto(
			com.google.protobuf.GeneratedMessage.Builder<?> builder) {
		super(builder);
		this.unknownFields = builder.getUnknownFields();
	}

	private FieldDescriptorProto(boolean noInit) {
		this.unknownFields = com.google.protobuf.UnknownFieldSet
				.getDefaultInstance();
	}

	private static final FieldDescriptorProto defaultInstance;

	public static FieldDescriptorProto getDefaultInstance() {
		return defaultInstance;
	}

	public FieldDescriptorProto getDefaultInstanceForType() {
		return defaultInstance;
	}

	private final com.google.protobuf.UnknownFieldSet unknownFields;

	@java.lang.Override
	public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
		return this.unknownFields;
	}

	private FieldDescriptorProto(com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		initFields();
		int mutable_bitField0_ = 0;
		com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
				.newBuilder();
		try {
			boolean done = false;
			while (!done) {
				int tag = input.readTag();
				switch (tag) {
				case 0:
					done = true;
					break;
				default: {
					if (!parseUnknownField(input, unknownFields,
							extensionRegistry, tag)) {
						done = true;
					}
					break;
				}
				case 10: {
					bitField0_ |= 0x00000001;
					name_ = input.readBytes();
					break;
				}
				case 18: {
					bitField0_ |= 0x00000020;
					extendee_ = input.readBytes();
					break;
				}
				case 24: {
					bitField0_ |= 0x00000002;
					number_ = input.readInt32();
					break;
				}
				case 32: {
					int rawValue = input.readEnum();
					com.google.protobuf.FieldDescriptorProto.Label value = com.google.protobuf.FieldDescriptorProto.Label
							.valueOf(rawValue);
					if (value == null) {
						unknownFields.mergeVarintField(4, rawValue);
					} else {
						bitField0_ |= 0x00000004;
						label_ = value;
					}
					break;
				}
				case 40: {
					int rawValue = input.readEnum();
					com.google.protobuf.FieldDescriptorProto.Type value = com.google.protobuf.FieldDescriptorProto.Type
							.valueOf(rawValue);
					if (value == null) {
						unknownFields.mergeVarintField(5, rawValue);
					} else {
						bitField0_ |= 0x00000008;
						type_ = value;
					}
					break;
				}
				case 50: {
					bitField0_ |= 0x00000010;
					typeName_ = input.readBytes();
					break;
				}
				case 58: {
					bitField0_ |= 0x00000040;
					defaultValue_ = input.readBytes();
					break;
				}
				case 66: {
					com.google.protobuf.FieldOptions.Builder subBuilder = null;
					if (((bitField0_ & 0x00000080) == 0x00000080)) {
						subBuilder = options_.toBuilder();
					}
					options_ = input.readMessage(
							com.google.protobuf.FieldOptions.PARSER,
							extensionRegistry);
					if (subBuilder != null) {
						subBuilder.mergeFrom(options_);
						options_ = subBuilder.buildPartial();
					}
					bitField0_ |= 0x00000080;
					break;
				}
				}
			}
		} catch (com.google.protobuf.InvalidProtocolBufferException e) {
			throw e.setUnfinishedMessage(this);
		} catch (java.io.IOException e) {
			throw new com.google.protobuf.InvalidProtocolBufferException(
					e.getMessage()).setUnfinishedMessage(this);
		} finally {
			this.unknownFields = unknownFields.build();
			makeExtensionsImmutable();
		}
	}

	public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
		return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldDescriptorProto_descriptor;
	}

	protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
		return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldDescriptorProto_fieldAccessorTable
				.ensureFieldAccessorsInitialized(
						com.google.protobuf.FieldDescriptorProto.class,
						com.google.protobuf.FieldDescriptorProto.Builder.class);
	}

	public static com.google.protobuf.Parser<FieldDescriptorProto> PARSER = new com.google.protobuf.AbstractParser<FieldDescriptorProto>() {
		public FieldDescriptorProto parsePartialFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return new FieldDescriptorProto(input, extensionRegistry);
		}
	};

	@java.lang.Override
	public com.google.protobuf.Parser<FieldDescriptorProto> getParserForType() {
		return PARSER;
	}

	/**
	 * Protobuf enum {@code google.protobuf.FieldDescriptorProto.Type}
	 */
	public enum Type implements com.google.protobuf.ProtocolMessageEnum {
		/**
		 * <code>TYPE_DOUBLE = 1;</code>
		 * 
		 * <pre>
		 * 0 is reserved for errors.
		 * Order is weird for historical reasons.
		 * </pre>
		 */
		TYPE_DOUBLE(0, 1),
		/**
		 * <code>TYPE_FLOAT = 2;</code>
		 */
		TYPE_FLOAT(1, 2),
		/**
		 * <code>TYPE_INT64 = 3;</code>
		 * 
		 * <pre>
		 * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
		 * negative values are likely.
		 * </pre>
		 */
		TYPE_INT64(2, 3),
		/**
		 * <code>TYPE_UINT64 = 4;</code>
		 */
		TYPE_UINT64(3, 4),
		/**
		 * <code>TYPE_INT32 = 5;</code>
		 * 
		 * <pre>
		 * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
		 * negative values are likely.
		 * </pre>
		 */
		TYPE_INT32(4, 5),
		/**
		 * <code>TYPE_FIXED64 = 6;</code>
		 */
		TYPE_FIXED64(5, 6),
		/**
		 * <code>TYPE_FIXED32 = 7;</code>
		 */
		TYPE_FIXED32(6, 7),
		/**
		 * <code>TYPE_BOOL = 8;</code>
		 */
		TYPE_BOOL(7, 8),
		/**
		 * <code>TYPE_STRING = 9;</code>
		 */
		TYPE_STRING(8, 9),
		/**
		 * <code>TYPE_GROUP = 10;</code>
		 * 
		 * <pre>
		 * Tag-delimited aggregate.
		 * </pre>
		 */
		TYPE_GROUP(9, 10),
		/**
		 * <code>TYPE_MESSAGE = 11;</code>
		 * 
		 * <pre>
		 * Length-delimited aggregate.
		 * </pre>
		 */
		TYPE_MESSAGE(10, 11),
		/**
		 * <code>TYPE_BYTES = 12;</code>
		 * 
		 * <pre>
		 * New in version 2.
		 * </pre>
		 */
		TYPE_BYTES(11, 12),
		/**
		 * <code>TYPE_UINT32 = 13;</code>
		 */
		TYPE_UINT32(12, 13),
		/**
		 * <code>TYPE_ENUM = 14;</code>
		 */
		TYPE_ENUM(13, 14),
		/**
		 * <code>TYPE_SFIXED32 = 15;</code>
		 */
		TYPE_SFIXED32(14, 15),
		/**
		 * <code>TYPE_SFIXED64 = 16;</code>
		 */
		TYPE_SFIXED64(15, 16),
		/**
		 * <code>TYPE_SINT32 = 17;</code>
		 * 
		 * <pre>
		 * Uses ZigZag encoding.
		 * </pre>
		 */
		TYPE_SINT32(16, 17),
		/**
		 * <code>TYPE_SINT64 = 18;</code>
		 * 
		 * <pre>
		 * Uses ZigZag encoding.
		 * </pre>
		 */
		TYPE_SINT64(17, 18), ;

		/**
		 * <code>TYPE_DOUBLE = 1;</code>
		 * 
		 * <pre>
		 * 0 is reserved for errors.
		 * Order is weird for historical reasons.
		 * </pre>
		 */
		public static final int TYPE_DOUBLE_VALUE = 1;
		/**
		 * <code>TYPE_FLOAT = 2;</code>
		 */
		public static final int TYPE_FLOAT_VALUE = 2;
		/**
		 * <code>TYPE_INT64 = 3;</code>
		 * 
		 * <pre>
		 * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
		 * negative values are likely.
		 * </pre>
		 */
		public static final int TYPE_INT64_VALUE = 3;
		/**
		 * <code>TYPE_UINT64 = 4;</code>
		 */
		public static final int TYPE_UINT64_VALUE = 4;
		/**
		 * <code>TYPE_INT32 = 5;</code>
		 * 
		 * <pre>
		 * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
		 * negative values are likely.
		 * </pre>
		 */
		public static final int TYPE_INT32_VALUE = 5;
		/**
		 * <code>TYPE_FIXED64 = 6;</code>
		 */
		public static final int TYPE_FIXED64_VALUE = 6;
		/**
		 * <code>TYPE_FIXED32 = 7;</code>
		 */
		public static final int TYPE_FIXED32_VALUE = 7;
		/**
		 * <code>TYPE_BOOL = 8;</code>
		 */
		public static final int TYPE_BOOL_VALUE = 8;
		/**
		 * <code>TYPE_STRING = 9;</code>
		 */
		public static final int TYPE_STRING_VALUE = 9;
		/**
		 * <code>TYPE_GROUP = 10;</code>
		 * 
		 * <pre>
		 * Tag-delimited aggregate.
		 * </pre>
		 */
		public static final int TYPE_GROUP_VALUE = 10;
		/**
		 * <code>TYPE_MESSAGE = 11;</code>
		 * 
		 * <pre>
		 * Length-delimited aggregate.
		 * </pre>
		 */
		public static final int TYPE_MESSAGE_VALUE = 11;
		/**
		 * <code>TYPE_BYTES = 12;</code>
		 * 
		 * <pre>
		 * New in version 2.
		 * </pre>
		 */
		public static final int TYPE_BYTES_VALUE = 12;
		/**
		 * <code>TYPE_UINT32 = 13;</code>
		 */
		public static final int TYPE_UINT32_VALUE = 13;
		/**
		 * <code>TYPE_ENUM = 14;</code>
		 */
		public static final int TYPE_ENUM_VALUE = 14;
		/**
		 * <code>TYPE_SFIXED32 = 15;</code>
		 */
		public static final int TYPE_SFIXED32_VALUE = 15;
		/**
		 * <code>TYPE_SFIXED64 = 16;</code>
		 */
		public static final int TYPE_SFIXED64_VALUE = 16;
		/**
		 * <code>TYPE_SINT32 = 17;</code>
		 * 
		 * <pre>
		 * Uses ZigZag encoding.
		 * </pre>
		 */
		public static final int TYPE_SINT32_VALUE = 17;
		/**
		 * <code>TYPE_SINT64 = 18;</code>
		 * 
		 * <pre>
		 * Uses ZigZag encoding.
		 * </pre>
		 */
		public static final int TYPE_SINT64_VALUE = 18;

		public final int getNumber() {
			return value;
		}

		public static Type valueOf(int value) {
			switch (value) {
			case 1:
				return TYPE_DOUBLE;
			case 2:
				return TYPE_FLOAT;
			case 3:
				return TYPE_INT64;
			case 4:
				return TYPE_UINT64;
			case 5:
				return TYPE_INT32;
			case 6:
				return TYPE_FIXED64;
			case 7:
				return TYPE_FIXED32;
			case 8:
				return TYPE_BOOL;
			case 9:
				return TYPE_STRING;
			case 10:
				return TYPE_GROUP;
			case 11:
				return TYPE_MESSAGE;
			case 12:
				return TYPE_BYTES;
			case 13:
				return TYPE_UINT32;
			case 14:
				return TYPE_ENUM;
			case 15:
				return TYPE_SFIXED32;
			case 16:
				return TYPE_SFIXED64;
			case 17:
				return TYPE_SINT32;
			case 18:
				return TYPE_SINT64;
			default:
				return null;
			}
		}

		public static com.google.protobuf.Internal.EnumLiteMap<Type> internalGetValueMap() {
			return internalValueMap;
		}

		private static com.google.protobuf.Internal.EnumLiteMap<Type> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<Type>() {
			public Type findValueByNumber(int number) {
				return Type.valueOf(number);
			}
		};

		public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
			return getDescriptor().getValues().get(index);
		}

		public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
			return getDescriptor();
		}

		public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
			return com.google.protobuf.FieldDescriptorProto.getDescriptor()
					.getEnumTypes().get(0);
		}

		private static final Type[] VALUES = values();

		public static Type valueOf(
				com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
			if (desc.getType() != getDescriptor()) {
				throw new java.lang.IllegalArgumentException(
						"EnumValueDescriptor is not for this type.");
			}
			return VALUES[desc.getIndex()];
		}

		private final int index;
		private final int value;

		private Type(int index, int value) {
			this.index = index;
			this.value = value;
		}

		// @@protoc_insertion_point(enum_scope:google.protobuf.FieldDescriptorProto.Type)
	}

	/**
	 * Protobuf enum {@code google.protobuf.FieldDescriptorProto.Label}
	 */
	public enum Label implements com.google.protobuf.ProtocolMessageEnum {
		/**
		 * <code>LABEL_OPTIONAL = 1;</code>
		 * 
		 * <pre>
		 * 0 is reserved for errors
		 * </pre>
		 */
		LABEL_OPTIONAL(0, 1),
		/**
		 * <code>LABEL_REQUIRED = 2;</code>
		 */
		LABEL_REQUIRED(1, 2),
		/**
		 * <code>LABEL_REPEATED = 3;</code>
		 * 
		 * <pre>
		 * TODO(sanjay): Should we add LABEL_MAP?
		 * </pre>
		 */
		LABEL_REPEATED(2, 3), ;

		/**
		 * <code>LABEL_OPTIONAL = 1;</code>
		 * 
		 * <pre>
		 * 0 is reserved for errors
		 * </pre>
		 */
		public static final int LABEL_OPTIONAL_VALUE = 1;
		/**
		 * <code>LABEL_REQUIRED = 2;</code>
		 */
		public static final int LABEL_REQUIRED_VALUE = 2;
		/**
		 * <code>LABEL_REPEATED = 3;</code>
		 * 
		 * <pre>
		 * TODO(sanjay): Should we add LABEL_MAP?
		 * </pre>
		 */
		public static final int LABEL_REPEATED_VALUE = 3;

		public final int getNumber() {
			return value;
		}

		public static Label valueOf(int value) {
			switch (value) {
			case 1:
				return LABEL_OPTIONAL;
			case 2:
				return LABEL_REQUIRED;
			case 3:
				return LABEL_REPEATED;
			default:
				return null;
			}
		}

		public static com.google.protobuf.Internal.EnumLiteMap<Label> internalGetValueMap() {
			return internalValueMap;
		}

		private static com.google.protobuf.Internal.EnumLiteMap<Label> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<Label>() {
			public Label findValueByNumber(int number) {
				return Label.valueOf(number);
			}
		};

		public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
			return getDescriptor().getValues().get(index);
		}

		public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
			return getDescriptor();
		}

		public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
			return com.google.protobuf.FieldDescriptorProto.getDescriptor()
					.getEnumTypes().get(1);
		}

		private static final Label[] VALUES = values();

		public static Label valueOf(
				com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
			if (desc.getType() != getDescriptor()) {
				throw new java.lang.IllegalArgumentException(
						"EnumValueDescriptor is not for this type.");
			}
			return VALUES[desc.getIndex()];
		}

		private final int index;
		private final int value;

		private Label(int index, int value) {
			this.index = index;
			this.value = value;
		}

		// @@protoc_insertion_point(enum_scope:google.protobuf.FieldDescriptorProto.Label)
	}

	private int bitField0_;
	// optional string name = 1;
	public static final int NAME_FIELD_NUMBER = 1;
	private java.lang.Object name_;

	/**
	 * <code>optional string name = 1;</code>
	 */
	public boolean hasName() {
		return ((bitField0_ & 0x00000001) == 0x00000001);
	}

	/**
	 * <code>optional string name = 1;</code>
	 */
	public java.lang.String getName() {
		java.lang.Object ref = name_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			if (bs.isValidUtf8()) {
				name_ = s;
			}
			return s;
		}
	}

	/**
	 * <code>optional string name = 1;</code>
	 */
	public com.google.protobuf.ByteString getNameBytes() {
		java.lang.Object ref = name_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b = com.google.protobuf.ByteString
					.copyFromUtf8((java.lang.String) ref);
			name_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	// optional int32 number = 3;
	public static final int NUMBER_FIELD_NUMBER = 3;
	private int number_;

	/**
	 * <code>optional int32 number = 3;</code>
	 */
	public boolean hasNumber() {
		return ((bitField0_ & 0x00000002) == 0x00000002);
	}

	/**
	 * <code>optional int32 number = 3;</code>
	 */
	public int getNumber() {
		return number_;
	}

	// optional .google.protobuf.FieldDescriptorProto.Label label = 4;
	public static final int LABEL_FIELD_NUMBER = 4;
	private com.google.protobuf.FieldDescriptorProto.Label label_;

	/**
	 * <code>optional .google.protobuf.FieldDescriptorProto.Label label = 4;</code>
	 */
	public boolean hasLabel() {
		return ((bitField0_ & 0x00000004) == 0x00000004);
	}

	/**
	 * <code>optional .google.protobuf.FieldDescriptorProto.Label label = 4;</code>
	 */
	public com.google.protobuf.FieldDescriptorProto.Label getLabel() {
		return label_;
	}

	// optional .google.protobuf.FieldDescriptorProto.Type type = 5;
	public static final int TYPE_FIELD_NUMBER = 5;
	private com.google.protobuf.FieldDescriptorProto.Type type_;

	/**
	 * <code>optional .google.protobuf.FieldDescriptorProto.Type type = 5;</code>
	 * 
	 * <pre>
	 * If type_name is set, this need not be set.  If both this and type_name
	 * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
	 * </pre>
	 */
	public boolean hasType() {
		return ((bitField0_ & 0x00000008) == 0x00000008);
	}

	/**
	 * <code>optional .google.protobuf.FieldDescriptorProto.Type type = 5;</code>
	 * 
	 * <pre>
	 * If type_name is set, this need not be set.  If both this and type_name
	 * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
	 * </pre>
	 */
	public com.google.protobuf.FieldDescriptorProto.Type getType() {
		return type_;
	}

	// optional string type_name = 6;
	public static final int TYPE_NAME_FIELD_NUMBER = 6;
	private java.lang.Object typeName_;

	/**
	 * <code>optional string type_name = 6;</code>
	 * 
	 * <pre>
	 * For message and enum types, this is the name of the type.  If the name
	 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
	 * rules are used to find the type (i.e. first the nested types within this
	 * message are searched, then within the parent, on up to the root
	 * namespace).
	 * </pre>
	 */
	public boolean hasTypeName() {
		return ((bitField0_ & 0x00000010) == 0x00000010);
	}

	/**
	 * <code>optional string type_name = 6;</code>
	 * 
	 * <pre>
	 * For message and enum types, this is the name of the type.  If the name
	 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
	 * rules are used to find the type (i.e. first the nested types within this
	 * message are searched, then within the parent, on up to the root
	 * namespace).
	 * </pre>
	 */
	public java.lang.String getTypeName() {
		java.lang.Object ref = typeName_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			if (bs.isValidUtf8()) {
				typeName_ = s;
			}
			return s;
		}
	}

	/**
	 * <code>optional string type_name = 6;</code>
	 * 
	 * <pre>
	 * For message and enum types, this is the name of the type.  If the name
	 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
	 * rules are used to find the type (i.e. first the nested types within this
	 * message are searched, then within the parent, on up to the root
	 * namespace).
	 * </pre>
	 */
	public com.google.protobuf.ByteString getTypeNameBytes() {
		java.lang.Object ref = typeName_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b = com.google.protobuf.ByteString
					.copyFromUtf8((java.lang.String) ref);
			typeName_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	// optional string extendee = 2;
	public static final int EXTENDEE_FIELD_NUMBER = 2;
	private java.lang.Object extendee_;

	/**
	 * <code>optional string extendee = 2;</code>
	 * 
	 * <pre>
	 * For extensions, this is the name of the type being extended.  It is
	 * resolved in the same manner as type_name.
	 * </pre>
	 */
	public boolean hasExtendee() {
		return ((bitField0_ & 0x00000020) == 0x00000020);
	}

	/**
	 * <code>optional string extendee = 2;</code>
	 * 
	 * <pre>
	 * For extensions, this is the name of the type being extended.  It is
	 * resolved in the same manner as type_name.
	 * </pre>
	 */
	public java.lang.String getExtendee() {
		java.lang.Object ref = extendee_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			if (bs.isValidUtf8()) {
				extendee_ = s;
			}
			return s;
		}
	}

	/**
	 * <code>optional string extendee = 2;</code>
	 * 
	 * <pre>
	 * For extensions, this is the name of the type being extended.  It is
	 * resolved in the same manner as type_name.
	 * </pre>
	 */
	public com.google.protobuf.ByteString getExtendeeBytes() {
		java.lang.Object ref = extendee_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b = com.google.protobuf.ByteString
					.copyFromUtf8((java.lang.String) ref);
			extendee_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	// optional string default_value = 7;
	public static final int DEFAULT_VALUE_FIELD_NUMBER = 7;
	private java.lang.Object defaultValue_;

	/**
	 * <code>optional string default_value = 7;</code>
	 * 
	 * <pre>
	 * For numeric types, contains the original text representation of the value.
	 * For booleans, "true" or "false".
	 * For strings, contains the default text contents (not escaped in any way).
	 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
	 * TODO(kenton):  Base-64 encode?
	 * </pre>
	 */
	public boolean hasDefaultValue() {
		return ((bitField0_ & 0x00000040) == 0x00000040);
	}

	/**
	 * <code>optional string default_value = 7;</code>
	 * 
	 * <pre>
	 * For numeric types, contains the original text representation of the value.
	 * For booleans, "true" or "false".
	 * For strings, contains the default text contents (not escaped in any way).
	 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
	 * TODO(kenton):  Base-64 encode?
	 * </pre>
	 */
	public java.lang.String getDefaultValue() {
		java.lang.Object ref = defaultValue_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			if (bs.isValidUtf8()) {
				defaultValue_ = s;
			}
			return s;
		}
	}

	/**
	 * <code>optional string default_value = 7;</code>
	 * 
	 * <pre>
	 * For numeric types, contains the original text representation of the value.
	 * For booleans, "true" or "false".
	 * For strings, contains the default text contents (not escaped in any way).
	 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
	 * TODO(kenton):  Base-64 encode?
	 * </pre>
	 */
	public com.google.protobuf.ByteString getDefaultValueBytes() {
		java.lang.Object ref = defaultValue_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b = com.google.protobuf.ByteString
					.copyFromUtf8((java.lang.String) ref);
			defaultValue_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	// optional .google.protobuf.FieldOptions options = 8;
	public static final int OPTIONS_FIELD_NUMBER = 8;
	private com.google.protobuf.FieldOptions options_;

	/**
	 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
	 */
	public boolean hasOptions() {
		return ((bitField0_ & 0x00000080) == 0x00000080);
	}

	/**
	 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
	 */
	public com.google.protobuf.FieldOptions getOptions() {
		return options_;
	}

	/**
	 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
	 */
	public com.google.protobuf.FieldOptionsOrBuilder getOptionsOrBuilder() {
		return options_;
	}

	private void initFields() {
		name_ = "";
		number_ = 0;
		label_ = com.google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL;
		type_ = com.google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE;
		typeName_ = "";
		extendee_ = "";
		defaultValue_ = "";
		options_ = com.google.protobuf.FieldOptions.getDefaultInstance();
	}

	private byte memoizedIsInitialized = -1;

	public final boolean isInitialized() {
		byte isInitialized = memoizedIsInitialized;
		if (isInitialized != -1)
			return isInitialized == 1;

		if (hasOptions()) {
			if (!getOptions().isInitialized()) {
				memoizedIsInitialized = 0;
				return false;
			}
		}
		memoizedIsInitialized = 1;
		return true;
	}

	public void writeTo(com.google.protobuf.CodedOutputStream output)
			throws java.io.IOException {
		getSerializedSize();
		if (((bitField0_ & 0x00000001) == 0x00000001)) {
			output.writeBytes(1, getNameBytes());
		}
		if (((bitField0_ & 0x00000020) == 0x00000020)) {
			output.writeBytes(2, getExtendeeBytes());
		}
		if (((bitField0_ & 0x00000002) == 0x00000002)) {
			output.writeInt32(3, number_);
		}
		if (((bitField0_ & 0x00000004) == 0x00000004)) {
			output.writeEnum(4, label_.getNumber());
		}
		if (((bitField0_ & 0x00000008) == 0x00000008)) {
			output.writeEnum(5, type_.getNumber());
		}
		if (((bitField0_ & 0x00000010) == 0x00000010)) {
			output.writeBytes(6, getTypeNameBytes());
		}
		if (((bitField0_ & 0x00000040) == 0x00000040)) {
			output.writeBytes(7, getDefaultValueBytes());
		}
		if (((bitField0_ & 0x00000080) == 0x00000080)) {
			output.writeMessage(8, options_);
		}
		getUnknownFields().writeTo(output);
	}

	private int memoizedSerializedSize = -1;

	public int getSerializedSize() {
		int size = memoizedSerializedSize;
		if (size != -1)
			return size;

		size = 0;
		if (((bitField0_ & 0x00000001) == 0x00000001)) {
			size += com.google.protobuf.CodedOutputStream.computeBytesSize(1,
					getNameBytes());
		}
		if (((bitField0_ & 0x00000020) == 0x00000020)) {
			size += com.google.protobuf.CodedOutputStream.computeBytesSize(2,
					getExtendeeBytes());
		}
		if (((bitField0_ & 0x00000002) == 0x00000002)) {
			size += com.google.protobuf.CodedOutputStream.computeInt32Size(3,
					number_);
		}
		if (((bitField0_ & 0x00000004) == 0x00000004)) {
			size += com.google.protobuf.CodedOutputStream.computeEnumSize(4,
					label_.getNumber());
		}
		if (((bitField0_ & 0x00000008) == 0x00000008)) {
			size += com.google.protobuf.CodedOutputStream.computeEnumSize(5,
					type_.getNumber());
		}
		if (((bitField0_ & 0x00000010) == 0x00000010)) {
			size += com.google.protobuf.CodedOutputStream.computeBytesSize(6,
					getTypeNameBytes());
		}
		if (((bitField0_ & 0x00000040) == 0x00000040)) {
			size += com.google.protobuf.CodedOutputStream.computeBytesSize(7,
					getDefaultValueBytes());
		}
		if (((bitField0_ & 0x00000080) == 0x00000080)) {
			size += com.google.protobuf.CodedOutputStream.computeMessageSize(8,
					options_);
		}
		size += getUnknownFields().getSerializedSize();
		memoizedSerializedSize = size;
		return size;
	}

	private static final long serialVersionUID = 0L;

	@java.lang.Override
	protected java.lang.Object writeReplace()
			throws java.io.ObjectStreamException {
		return super.writeReplace();
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			com.google.protobuf.ByteString data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			com.google.protobuf.ByteString data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(byte[] data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			byte[] data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			java.io.InputStream input) throws java.io.IOException {
		return PARSER.parseFrom(input);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return PARSER.parseFrom(input, extensionRegistry);
	}

	public static com.google.protobuf.FieldDescriptorProto parseDelimitedFrom(
			java.io.InputStream input) throws java.io.IOException {
		return PARSER.parseDelimitedFrom(input);
	}

	public static com.google.protobuf.FieldDescriptorProto parseDelimitedFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return PARSER.parseDelimitedFrom(input, extensionRegistry);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			com.google.protobuf.CodedInputStream input)
			throws java.io.IOException {
		return PARSER.parseFrom(input);
	}

	public static com.google.protobuf.FieldDescriptorProto parseFrom(
			com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return PARSER.parseFrom(input, extensionRegistry);
	}

	public static Builder newBuilder() {
		return Builder.create();
	}

	public Builder newBuilderForType() {
		return newBuilder();
	}

	public static Builder newBuilder(
			com.google.protobuf.FieldDescriptorProto prototype) {
		return newBuilder().mergeFrom(prototype);
	}

	public Builder toBuilder() {
		return newBuilder(this);
	}

	@java.lang.Override
	protected Builder newBuilderForType(
			com.google.protobuf.GeneratedMessage.BuilderParent parent) {
		Builder builder = new Builder(parent);
		return builder;
	}

	/**
	 * Protobuf type {@code google.protobuf.FieldDescriptorProto}
	 * 
	 * <pre>
	 * Describes a field within a message.
	 * </pre>
	 */
	public static final class Builder extends
			com.google.protobuf.GeneratedMessage.Builder<Builder> implements
			com.google.protobuf.FieldDescriptorProtoOrBuilder {
		public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
			return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldDescriptorProto_descriptor;
		}

		protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
			return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldDescriptorProto_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							com.google.protobuf.FieldDescriptorProto.class,
							com.google.protobuf.FieldDescriptorProto.Builder.class);
		}

		// Construct using com.google.protobuf.FieldDescriptorProto.newBuilder()
		private Builder() {
			maybeForceBuilderInitialization();
		}

		private Builder(
				com.google.protobuf.GeneratedMessage.BuilderParent parent) {
			super(parent);
			maybeForceBuilderInitialization();
		}

		private void maybeForceBuilderInitialization() {
			if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
				getOptionsFieldBuilder();
			}
		}

		private static Builder create() {
			return new Builder();
		}

		public Builder clear() {
			super.clear();
			name_ = "";
			bitField0_ = (bitField0_ & ~0x00000001);
			number_ = 0;
			bitField0_ = (bitField0_ & ~0x00000002);
			label_ = com.google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL;
			bitField0_ = (bitField0_ & ~0x00000004);
			type_ = com.google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE;
			bitField0_ = (bitField0_ & ~0x00000008);
			typeName_ = "";
			bitField0_ = (bitField0_ & ~0x00000010);
			extendee_ = "";
			bitField0_ = (bitField0_ & ~0x00000020);
			defaultValue_ = "";
			bitField0_ = (bitField0_ & ~0x00000040);
			if (optionsBuilder_ == null) {
				options_ = com.google.protobuf.FieldOptions
						.getDefaultInstance();
			} else {
				optionsBuilder_.clear();
			}
			bitField0_ = (bitField0_ & ~0x00000080);
			return this;
		}

		public Builder clone() {
			return create().mergeFrom(buildPartial());
		}

		public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
			return com.google.protobuf.DescriptorProtos.internal_static_google_protobuf_FieldDescriptorProto_descriptor;
		}

		public com.google.protobuf.FieldDescriptorProto getDefaultInstanceForType() {
			return com.google.protobuf.FieldDescriptorProto
					.getDefaultInstance();
		}

		public com.google.protobuf.FieldDescriptorProto build() {
			com.google.protobuf.FieldDescriptorProto result = buildPartial();
			if (!result.isInitialized()) {
				throw newUninitializedMessageException(result);
			}
			return result;
		}

		public com.google.protobuf.FieldDescriptorProto buildPartial() {
			com.google.protobuf.FieldDescriptorProto result = new com.google.protobuf.FieldDescriptorProto(
					this);
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
				to_bitField0_ |= 0x00000001;
			}
			result.name_ = name_;
			if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
				to_bitField0_ |= 0x00000002;
			}
			result.number_ = number_;
			if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
				to_bitField0_ |= 0x00000004;
			}
			result.label_ = label_;
			if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
				to_bitField0_ |= 0x00000008;
			}
			result.type_ = type_;
			if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
				to_bitField0_ |= 0x00000010;
			}
			result.typeName_ = typeName_;
			if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
				to_bitField0_ |= 0x00000020;
			}
			result.extendee_ = extendee_;
			if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
				to_bitField0_ |= 0x00000040;
			}
			result.defaultValue_ = defaultValue_;
			if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
				to_bitField0_ |= 0x00000080;
			}
			if (optionsBuilder_ == null) {
				result.options_ = options_;
			} else {
				result.options_ = optionsBuilder_.build();
			}
			result.bitField0_ = to_bitField0_;
			onBuilt();
			return result;
		}

		public Builder mergeFrom(com.google.protobuf.Message other) {
			if (other instanceof com.google.protobuf.FieldDescriptorProto) {
				return mergeFrom((com.google.protobuf.FieldDescriptorProto) other);
			} else {
				super.mergeFrom(other);
				return this;
			}
		}

		public Builder mergeFrom(com.google.protobuf.FieldDescriptorProto other) {
			if (other == com.google.protobuf.FieldDescriptorProto
					.getDefaultInstance())
				return this;
			if (other.hasName()) {
				bitField0_ |= 0x00000001;
				name_ = other.name_;
				onChanged();
			}
			if (other.hasNumber()) {
				setNumber(other.getNumber());
			}
			if (other.hasLabel()) {
				setLabel(other.getLabel());
			}
			if (other.hasType()) {
				setType(other.getType());
			}
			if (other.hasTypeName()) {
				bitField0_ |= 0x00000010;
				typeName_ = other.typeName_;
				onChanged();
			}
			if (other.hasExtendee()) {
				bitField0_ |= 0x00000020;
				extendee_ = other.extendee_;
				onChanged();
			}
			if (other.hasDefaultValue()) {
				bitField0_ |= 0x00000040;
				defaultValue_ = other.defaultValue_;
				onChanged();
			}
			if (other.hasOptions()) {
				mergeOptions(other.getOptions());
			}
			this.mergeUnknownFields(other.getUnknownFields());
			return this;
		}

		public final boolean isInitialized() {
			if (hasOptions()) {
				if (!getOptions().isInitialized()) {

					return false;
				}
			}
			return true;
		}

		public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			com.google.protobuf.FieldDescriptorProto parsedMessage = null;
			try {
				parsedMessage = PARSER.parsePartialFrom(input,
						extensionRegistry);
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				parsedMessage = (com.google.protobuf.FieldDescriptorProto) e
						.getUnfinishedMessage();
				throw e;
			} finally {
				if (parsedMessage != null) {
					mergeFrom(parsedMessage);
				}
			}
			return this;
		}

		private int bitField0_;

		// optional string name = 1;
		private java.lang.Object name_ = "";

		/**
		 * <code>optional string name = 1;</code>
		 */
		public boolean hasName() {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		}

		/**
		 * <code>optional string name = 1;</code>
		 */
		public java.lang.String getName() {
			java.lang.Object ref = name_;
			if (!(ref instanceof java.lang.String)) {
				java.lang.String s = ((com.google.protobuf.ByteString) ref)
						.toStringUtf8();
				name_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <code>optional string name = 1;</code>
		 */
		public com.google.protobuf.ByteString getNameBytes() {
			java.lang.Object ref = name_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString
						.copyFromUtf8((java.lang.String) ref);
				name_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <code>optional string name = 1;</code>
		 */
		public Builder setName(java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000001;
			name_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional string name = 1;</code>
		 */
		public Builder clearName() {
			bitField0_ = (bitField0_ & ~0x00000001);
			name_ = getDefaultInstance().getName();
			onChanged();
			return this;
		}

		/**
		 * <code>optional string name = 1;</code>
		 */
		public Builder setNameBytes(com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000001;
			name_ = value;
			onChanged();
			return this;
		}

		// optional int32 number = 3;
		private int number_;

		/**
		 * <code>optional int32 number = 3;</code>
		 */
		public boolean hasNumber() {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		}

		/**
		 * <code>optional int32 number = 3;</code>
		 */
		public int getNumber() {
			return number_;
		}

		/**
		 * <code>optional int32 number = 3;</code>
		 */
		public Builder setNumber(int value) {
			bitField0_ |= 0x00000002;
			number_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional int32 number = 3;</code>
		 */
		public Builder clearNumber() {
			bitField0_ = (bitField0_ & ~0x00000002);
			number_ = 0;
			onChanged();
			return this;
		}

		// optional .google.protobuf.FieldDescriptorProto.Label label = 4;
		private com.google.protobuf.FieldDescriptorProto.Label label_ = com.google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL;

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Label label = 4;</code>
		 */
		public boolean hasLabel() {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		}

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Label label = 4;</code>
		 */
		public com.google.protobuf.FieldDescriptorProto.Label getLabel() {
			return label_;
		}

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Label label = 4;</code>
		 */
		public Builder setLabel(
				com.google.protobuf.FieldDescriptorProto.Label value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000004;
			label_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Label label = 4;</code>
		 */
		public Builder clearLabel() {
			bitField0_ = (bitField0_ & ~0x00000004);
			label_ = com.google.protobuf.FieldDescriptorProto.Label.LABEL_OPTIONAL;
			onChanged();
			return this;
		}

		// optional .google.protobuf.FieldDescriptorProto.Type type = 5;
		private com.google.protobuf.FieldDescriptorProto.Type type_ = com.google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE;

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Type type = 5;</code>
		 * 
		 * <pre>
		 * If type_name is set, this need not be set.  If both this and type_name
		 * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
		 * </pre>
		 */
		public boolean hasType() {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		}

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Type type = 5;</code>
		 * 
		 * <pre>
		 * If type_name is set, this need not be set.  If both this and type_name
		 * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
		 * </pre>
		 */
		public com.google.protobuf.FieldDescriptorProto.Type getType() {
			return type_;
		}

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Type type = 5;</code>
		 * 
		 * <pre>
		 * If type_name is set, this need not be set.  If both this and type_name
		 * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
		 * </pre>
		 */
		public Builder setType(
				com.google.protobuf.FieldDescriptorProto.Type value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000008;
			type_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldDescriptorProto.Type type = 5;</code>
		 * 
		 * <pre>
		 * If type_name is set, this need not be set.  If both this and type_name
		 * are set, this must be either TYPE_ENUM or TYPE_MESSAGE.
		 * </pre>
		 */
		public Builder clearType() {
			bitField0_ = (bitField0_ & ~0x00000008);
			type_ = com.google.protobuf.FieldDescriptorProto.Type.TYPE_DOUBLE;
			onChanged();
			return this;
		}

		// optional string type_name = 6;
		private java.lang.Object typeName_ = "";

		/**
		 * <code>optional string type_name = 6;</code>
		 * 
		 * <pre>
		 * For message and enum types, this is the name of the type.  If the name
		 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
		 * rules are used to find the type (i.e. first the nested types within this
		 * message are searched, then within the parent, on up to the root
		 * namespace).
		 * </pre>
		 */
		public boolean hasTypeName() {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		}

		/**
		 * <code>optional string type_name = 6;</code>
		 * 
		 * <pre>
		 * For message and enum types, this is the name of the type.  If the name
		 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
		 * rules are used to find the type (i.e. first the nested types within this
		 * message are searched, then within the parent, on up to the root
		 * namespace).
		 * </pre>
		 */
		public java.lang.String getTypeName() {
			java.lang.Object ref = typeName_;
			if (!(ref instanceof java.lang.String)) {
				java.lang.String s = ((com.google.protobuf.ByteString) ref)
						.toStringUtf8();
				typeName_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <code>optional string type_name = 6;</code>
		 * 
		 * <pre>
		 * For message and enum types, this is the name of the type.  If the name
		 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
		 * rules are used to find the type (i.e. first the nested types within this
		 * message are searched, then within the parent, on up to the root
		 * namespace).
		 * </pre>
		 */
		public com.google.protobuf.ByteString getTypeNameBytes() {
			java.lang.Object ref = typeName_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString
						.copyFromUtf8((java.lang.String) ref);
				typeName_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <code>optional string type_name = 6;</code>
		 * 
		 * <pre>
		 * For message and enum types, this is the name of the type.  If the name
		 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
		 * rules are used to find the type (i.e. first the nested types within this
		 * message are searched, then within the parent, on up to the root
		 * namespace).
		 * </pre>
		 */
		public Builder setTypeName(java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000010;
			typeName_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional string type_name = 6;</code>
		 * 
		 * <pre>
		 * For message and enum types, this is the name of the type.  If the name
		 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
		 * rules are used to find the type (i.e. first the nested types within this
		 * message are searched, then within the parent, on up to the root
		 * namespace).
		 * </pre>
		 */
		public Builder clearTypeName() {
			bitField0_ = (bitField0_ & ~0x00000010);
			typeName_ = getDefaultInstance().getTypeName();
			onChanged();
			return this;
		}

		/**
		 * <code>optional string type_name = 6;</code>
		 * 
		 * <pre>
		 * For message and enum types, this is the name of the type.  If the name
		 * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
		 * rules are used to find the type (i.e. first the nested types within this
		 * message are searched, then within the parent, on up to the root
		 * namespace).
		 * </pre>
		 */
		public Builder setTypeNameBytes(com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000010;
			typeName_ = value;
			onChanged();
			return this;
		}

		// optional string extendee = 2;
		private java.lang.Object extendee_ = "";

		/**
		 * <code>optional string extendee = 2;</code>
		 * 
		 * <pre>
		 * For extensions, this is the name of the type being extended.  It is
		 * resolved in the same manner as type_name.
		 * </pre>
		 */
		public boolean hasExtendee() {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		}

		/**
		 * <code>optional string extendee = 2;</code>
		 * 
		 * <pre>
		 * For extensions, this is the name of the type being extended.  It is
		 * resolved in the same manner as type_name.
		 * </pre>
		 */
		public java.lang.String getExtendee() {
			java.lang.Object ref = extendee_;
			if (!(ref instanceof java.lang.String)) {
				java.lang.String s = ((com.google.protobuf.ByteString) ref)
						.toStringUtf8();
				extendee_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <code>optional string extendee = 2;</code>
		 * 
		 * <pre>
		 * For extensions, this is the name of the type being extended.  It is
		 * resolved in the same manner as type_name.
		 * </pre>
		 */
		public com.google.protobuf.ByteString getExtendeeBytes() {
			java.lang.Object ref = extendee_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString
						.copyFromUtf8((java.lang.String) ref);
				extendee_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <code>optional string extendee = 2;</code>
		 * 
		 * <pre>
		 * For extensions, this is the name of the type being extended.  It is
		 * resolved in the same manner as type_name.
		 * </pre>
		 */
		public Builder setExtendee(java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000020;
			extendee_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional string extendee = 2;</code>
		 * 
		 * <pre>
		 * For extensions, this is the name of the type being extended.  It is
		 * resolved in the same manner as type_name.
		 * </pre>
		 */
		public Builder clearExtendee() {
			bitField0_ = (bitField0_ & ~0x00000020);
			extendee_ = getDefaultInstance().getExtendee();
			onChanged();
			return this;
		}

		/**
		 * <code>optional string extendee = 2;</code>
		 * 
		 * <pre>
		 * For extensions, this is the name of the type being extended.  It is
		 * resolved in the same manner as type_name.
		 * </pre>
		 */
		public Builder setExtendeeBytes(com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000020;
			extendee_ = value;
			onChanged();
			return this;
		}

		// optional string default_value = 7;
		private java.lang.Object defaultValue_ = "";

		/**
		 * <code>optional string default_value = 7;</code>
		 * 
		 * <pre>
		 * For numeric types, contains the original text representation of the value.
		 * For booleans, "true" or "false".
		 * For strings, contains the default text contents (not escaped in any way).
		 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
		 * TODO(kenton):  Base-64 encode?
		 * </pre>
		 */
		public boolean hasDefaultValue() {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		}

		/**
		 * <code>optional string default_value = 7;</code>
		 * 
		 * <pre>
		 * For numeric types, contains the original text representation of the value.
		 * For booleans, "true" or "false".
		 * For strings, contains the default text contents (not escaped in any way).
		 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
		 * TODO(kenton):  Base-64 encode?
		 * </pre>
		 */
		public java.lang.String getDefaultValue() {
			java.lang.Object ref = defaultValue_;
			if (!(ref instanceof java.lang.String)) {
				java.lang.String s = ((com.google.protobuf.ByteString) ref)
						.toStringUtf8();
				defaultValue_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <code>optional string default_value = 7;</code>
		 * 
		 * <pre>
		 * For numeric types, contains the original text representation of the value.
		 * For booleans, "true" or "false".
		 * For strings, contains the default text contents (not escaped in any way).
		 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
		 * TODO(kenton):  Base-64 encode?
		 * </pre>
		 */
		public com.google.protobuf.ByteString getDefaultValueBytes() {
			java.lang.Object ref = defaultValue_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString
						.copyFromUtf8((java.lang.String) ref);
				defaultValue_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <code>optional string default_value = 7;</code>
		 * 
		 * <pre>
		 * For numeric types, contains the original text representation of the value.
		 * For booleans, "true" or "false".
		 * For strings, contains the default text contents (not escaped in any way).
		 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
		 * TODO(kenton):  Base-64 encode?
		 * </pre>
		 */
		public Builder setDefaultValue(java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000040;
			defaultValue_ = value;
			onChanged();
			return this;
		}

		/**
		 * <code>optional string default_value = 7;</code>
		 * 
		 * <pre>
		 * For numeric types, contains the original text representation of the value.
		 * For booleans, "true" or "false".
		 * For strings, contains the default text contents (not escaped in any way).
		 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
		 * TODO(kenton):  Base-64 encode?
		 * </pre>
		 */
		public Builder clearDefaultValue() {
			bitField0_ = (bitField0_ & ~0x00000040);
			defaultValue_ = getDefaultInstance().getDefaultValue();
			onChanged();
			return this;
		}

		/**
		 * <code>optional string default_value = 7;</code>
		 * 
		 * <pre>
		 * For numeric types, contains the original text representation of the value.
		 * For booleans, "true" or "false".
		 * For strings, contains the default text contents (not escaped in any way).
		 * For bytes, contains the C escaped value.  All bytes &gt;= 128 are escaped.
		 * TODO(kenton):  Base-64 encode?
		 * </pre>
		 */
		public Builder setDefaultValueBytes(com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			bitField0_ |= 0x00000040;
			defaultValue_ = value;
			onChanged();
			return this;
		}

		// optional .google.protobuf.FieldOptions options = 8;
		private com.google.protobuf.FieldOptions options_ = com.google.protobuf.FieldOptions
				.getDefaultInstance();
		private com.google.protobuf.SingleFieldBuilder<com.google.protobuf.FieldOptions, com.google.protobuf.FieldOptions.Builder, com.google.protobuf.FieldOptionsOrBuilder> optionsBuilder_;

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public boolean hasOptions() {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public com.google.protobuf.FieldOptions getOptions() {
			if (optionsBuilder_ == null) {
				return options_;
			} else {
				return optionsBuilder_.getMessage();
			}
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public Builder setOptions(com.google.protobuf.FieldOptions value) {
			if (optionsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				options_ = value;
				onChanged();
			} else {
				optionsBuilder_.setMessage(value);
			}
			bitField0_ |= 0x00000080;
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public Builder setOptions(
				com.google.protobuf.FieldOptions.Builder builderForValue) {
			if (optionsBuilder_ == null) {
				options_ = builderForValue.build();
				onChanged();
			} else {
				optionsBuilder_.setMessage(builderForValue.build());
			}
			bitField0_ |= 0x00000080;
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public Builder mergeOptions(com.google.protobuf.FieldOptions value) {
			if (optionsBuilder_ == null) {
				if (((bitField0_ & 0x00000080) == 0x00000080)
						&& options_ != com.google.protobuf.FieldOptions
								.getDefaultInstance()) {
					options_ = com.google.protobuf.FieldOptions
							.newBuilder(options_).mergeFrom(value)
							.buildPartial();
				} else {
					options_ = value;
				}
				onChanged();
			} else {
				optionsBuilder_.mergeFrom(value);
			}
			bitField0_ |= 0x00000080;
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public Builder clearOptions() {
			if (optionsBuilder_ == null) {
				options_ = com.google.protobuf.FieldOptions
						.getDefaultInstance();
				onChanged();
			} else {
				optionsBuilder_.clear();
			}
			bitField0_ = (bitField0_ & ~0x00000080);
			return this;
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public com.google.protobuf.FieldOptions.Builder getOptionsBuilder() {
			bitField0_ |= 0x00000080;
			onChanged();
			return getOptionsFieldBuilder().getBuilder();
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		public com.google.protobuf.FieldOptionsOrBuilder getOptionsOrBuilder() {
			if (optionsBuilder_ != null) {
				return optionsBuilder_.getMessageOrBuilder();
			} else {
				return options_;
			}
		}

		/**
		 * <code>optional .google.protobuf.FieldOptions options = 8;</code>
		 */
		private com.google.protobuf.SingleFieldBuilder<com.google.protobuf.FieldOptions, com.google.protobuf.FieldOptions.Builder, com.google.protobuf.FieldOptionsOrBuilder> getOptionsFieldBuilder() {
			if (optionsBuilder_ == null) {
				optionsBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.google.protobuf.FieldOptions, com.google.protobuf.FieldOptions.Builder, com.google.protobuf.FieldOptionsOrBuilder>(
						options_, getParentForChildren(), isClean());
				options_ = null;
			}
			return optionsBuilder_;
		}

		// @@protoc_insertion_point(builder_scope:google.protobuf.FieldDescriptorProto)
	}

	static {
		defaultInstance = new FieldDescriptorProto(true);
		defaultInstance.initFields();
	}

	// @@protoc_insertion_point(class_scope:google.protobuf.FieldDescriptorProto)
}
